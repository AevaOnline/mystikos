#!/bin/bash

if [ "$#" == "0" ]; then
    echo "Usage: $0 <test> <args...>"
    exit 1
fi

if [ -z "${TESTNAME}" ]; then
    echo "$0: TESTNAME is undefined"
    exit 1
fi

if [ -z "${TESTDIR}" ]; then
    echo "$0: TESTDIR is undefined"
    exit 1
fi

TESTSUBDIR=${TESTDIR}/${TESTNAME}

# Use colors if stdout is a tty device (non-batch mode)
green="\e[32m"
red="\e[31m"
lightblue="\e[94m"
magenta="\e[35m"
cyan="\e[36m"
default="\e[39m"

test_passed()
{
    local cmd=$*
    echo -n -e ${green}
    echo "    passed (${TESTNAME})"
    echo -n -e ${default}
    echo "" >> ${TESTSUBDIR}/passed
}

test_failed()
{
    local cmd;

    cmd=$*
    echo -n -e ${red}
    echo "    failed (${TESTNAME})"
    echo -n -e ${default}
    echo "" >> ${TESTSUBDIR}/failed
}

test_timedout()
{
    local cmd;

    cmd=$*
    echo -n -e ${red}
    echo "    timedout (${TESTNAME})"
    echo -n -e ${default}
    echo "" >> ${TESTSUBDIR}/failed
}

if [ -z "${TIMEOUT}" ]; then
timeout=60
else
timeout=${TIMEOUT}
fi

run_test()
{
    local cmd;

    # Remove extraneous whitespace from the command:
    for i in $*
    do
        cmd="${cmd} $i"
    done

    echo -n -e ${cyan}
    echo "=== start (${TESTNAME})"
    echo -n -e ${default}

    local tempfile=$(/bin/mktemp)

    # run the test
    if [ -z "${NOTIMEOUT}" ]; then
        timeout="/usr/bin/timeout ${timeout}"
    else
        timeout=
    fi

    output=${TESTSUBDIR}/output
    time="/usr/bin/time -f "%e" --quiet -o ${tempfile}"

    if [ -z "${VERBOSE}" ]; then
        echo ${cmd} 2>&1 | tee ${output} > /dev/null
        set -o pipefail
        ${timeout} ${time} ${cmd} 2>&1 | tee -a ${output} > /dev/null
        ret=$?
        set +o pipefail
    else
        echo ${cmd} 2>&1 | tee ${output}
        set -o pipefail
        ${timeout} ${time} ${cmd} 2>&1 | tee -a ${output}
        ret=$?
        set +o pipefail
    fi
    seconds=$(cat ${tempfile})
    rm -f ${tempfile}

    if [ "${ret}" == "0" ]; then
        test_passed $cmd
        echo -n -e ${cyan}
        echo "    ${seconds} seconds"
        echo -n -e ${default}
    elif [ "${ret}" == "124" ]; then
        test_timedout $cmd
    else
        test_failed ${cmd}
        echo -n -e ${cyan}
        echo "    ${seconds} seconds"
        echo -n -e ${default}
    fi

    echo ""
}

summarize()
{
    if [ "${SUMMARY}" == "1" ]; then
        find ${TESTDIR} -name 'failed' | wc -l > ${TESTDIR}/num.failed
        find ${TESTDIR} -name 'passed' | wc -l > ${TESTDIR}/num.passed
        num_passed=$(cat ${TESTDIR}/num.passed)
        num_failed=$(cat ${TESTDIR}/num.failed)

        echo -n -e ${magenta}
        echo "passed: ${num_passed}"
        echo "failed: ${num_failed}"
        echo -n -e ${default}

        if [ "${num_failed}" != "0" ]; then
            failed=$(find ${TESTDIR} -name failed)
            for i in ${failed}
            do
                r=$(echo ${i} | sed "s~${TESTDIR}/~~g")
                echo -n -e ${red}
                echo "failed: ${r}"
                echo -n -e ${default}
            done
            exit 1
        else
            exit 0
        fi
    fi
}

mkdir -p ${TESTSUBDIR}

if [ ! -d "${TESTSUBDIR}" ]; then
    echo "$0: cannot created directory: ${TESTSUBDIR}"
    exit 1
fi

run_test $*

summarize
