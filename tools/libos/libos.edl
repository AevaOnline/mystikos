enclave
{
    from "openenclave/edl/sgx/platform.edl" import *;
    from "openenclave/edl/syscall.edl" import *;
    from "openenclave/edl/logging.edl" import oe_write_ocall;
    from "openenclave/edl/fcntl.edl" import *;

    include "libos/shm.h"

    struct libos_options
    {
        bool trace_syscalls;
        bool export_ramfs;
    };

    struct libos_timespec
    {
       long tv_sec;
       long tv_nsec;
    };

    trusted
    {
        public int libos_enter_ecall(
            [in] struct libos_options* options,
            [in] struct libos_shm* shared_memory,
            [in, size=args_size] const void* args,
            size_t args_size,
            [in, size=env_size] const void* env,
            size_t env_size,
            uint64_t event);

        public long libos_run_thread_ecall(uint64_t cookie, uint64_t event);
    };

    untrusted
    {
        void libos_rdtsc_ocall([out] uint32_t* rax, [out] uint32_t* rdx);

        void libos_cpuid_ocall(
            uint32_t leaf,
            uint32_t subleaf,
            [out] uint32_t* rax,
            [out] uint32_t* rbx,
            [out] uint32_t* rcx,
            [out] uint32_t* rdx);

        int libos_add_symbol_file_ocall(
            [in, size=file_size] const void* file_data,
            size_t file_size,
            [user_check] const void* text_data,
            size_t text_size);

        int libos_load_symbols_ocall();

        int libos_unload_symbols_ocall();

        long libos_syscall_isatty_ocall(int fd);

        long libos_create_thread_ocall(uint64_t cookie);

        long libos_wait_ocall(
            uint64_t event,
            [in] const struct libos_timespec* timeout);

        long libos_wake_ocall(uint64_t event);

        long libos_wake_wait_ocall(
            uint64_t waiter_event,
            uint64_t self_event,
            [in] const struct libos_timespec* timeout);

        long libos_export_file_ocall(
            [in, string] const char* path,
            [in, size=size] const void* data,
            size_t size);
    };
};
